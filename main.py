import os
import random
import json
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º—Ç—ã
with open("data/prompts.json", "r", encoding="utf-8") as f:
    PROMPTS = json.load(f)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    text = (
        f"–ô–æ—É, {message.from_user.first_name} üëã\n\n"
        "–Ø —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π <b>PromptPilot</b> ‚úàÔ∏è\n"
        "–î–∞–≤–∞–π –±–∞—Ö–Ω–µ–º —Ç–µ–±–µ —Å–≤–µ–∂–∏–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏? üî•\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "üëâ /prompt ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º—Ç\n"
        "üëâ /chat ‚Äî –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π\n"
        "üëâ /help ‚Äî –ø–æ–º–æ—â—å"
    )
    await message.answer(text)


@dp.message_handler(commands=["prompt"])
async def get_prompt(message: types.Message):
    prompt = random.choice(PROMPTS)
    await message.answer(f"üé® –í–æ—Ç —Ç–µ–±–µ –ø—Ä–æ–º—Ç:\n\n<code>{prompt}</code>")


@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    await message.answer("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/prompt ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º—Ç\n"
                         "/chat ‚Äî –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π\n"
                         "/help ‚Äî –ø–æ–º–æ—â—å")


# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —á–∞—Ç-–±–æ—Ç (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å)
@dp.message_handler(commands=["chat"])
async def chat_mode(message: types.Message):
    await message.answer("–û–∫–µ–π, –¥–∞–≤–∞–π –ø–æ–±–æ–ª—Ç–∞–µ–º ü§ü –ù–∞–ø–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ!")

@dp.message_handler(lambda msg: True)
async def casual_chat(message: types.Message):
    responses = [
        "–ß–µ—Ç–∫–æ üî• –ê —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
        "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è, –±—Ä–æ üòé",
        "–•–∞—Ö–∞, —ç—Ç–æ —Ç–æ–ø—á–∏–∫ üòÇ",
        "–°–ª—É—à–∞–π, –∞ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–º—Ç–∏–∫ —Å–ª–æ–≤–∏—Ç—å? –ù–∞–ø–∏—à–∏ /prompt üòâ",
        "–ë—Ä–æ, –∑–≤—É—á–∏—Ç –∫–∞–∫ –≤–∞–π–± ‚ú®"
    ]
    if not message.text.startswith("/"):
        await message.answer(random.choice(responses))


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
