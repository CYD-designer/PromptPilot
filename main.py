import os
import random
import json
import openai
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# -----------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway)
# -----------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ü—Ä–æ–≤–µ—Ä—å BOT_TOKEN –∏ OPENAI_API_KEY –≤ Variables Railway!")

openai.api_key = OPENAI_API_KEY

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# -----------------------------
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# -----------------------------
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º—Ç—ã
# -----------------------------
with open("data/prompts.json", "r", encoding="utf-8") as f:
    PROMPTS = json.load(f)

# -----------------------------
# –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å GPT
# -----------------------------
def ai_reply(user_message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ PromptPilot. –û–±—â–∞–π—Å—è –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–π —é–º–æ—Ä, —ç–º–æ–¥–∑–∏ –∏ –ª—ë–≥–∫–∏–π –∑—É–º–µ—Ä—Å–∫–∏–π —Å—Ç–∏–ª—å."},
                {"role": "user", "content": user_message}
            ]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ GPT:", e)
        return "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"

# -----------------------------
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# -----------------------------
def main_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üé® –ù–æ–≤—ã–π –ø—Ä–æ–º—Ç", callback_data="new_prompt"))
    keyboard.add(InlineKeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º", callback_data="chat_mode"))
    return keyboard

# -----------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã
# -----------------------------
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    text = (
        f"–ô–æ—É, {message.from_user.first_name} üëã\n\n"
        "–Ø —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π <b>PromptPilot</b> ‚úàÔ∏è\n"
        "–Ø –º–æ–≥—É –¥–∞—Ç—å —Ç–µ–±–µ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–º—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–±–æ–ª—Ç–∞—Ç—å üòé\n\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–∏–∂–µ üëá"
    )
    await message.answer(text, reply_markup=main_keyboard())

# -----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
# -----------------------------
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "new_prompt":
        prompt = random.choice(PROMPTS)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üé® –ï—â—ë –ø—Ä–æ–º—Ç", callback_data="new_prompt"))
        await bot.send_message(callback_query.from_user.id, f"üéØ –í–æ—Ç —Ç–≤–æ–π –ø—Ä–æ–º—Ç:\n\n<code>{prompt}</code>", reply_markup=keyboard)
    elif callback_query.data == "chat_mode":
        await bot.send_message(callback_query.from_user.id, "–û–∫–µ–π, –¥–∞–≤–∞–π –ø–æ—Ç—Ä–µ—â–∏–º ü§ü –ü–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ!")

# -----------------------------
# –ß–∞—Ç —Å GPT
# -----------------------------
@dp.message_handler(lambda msg: True)
async def casual_chat(message: types.Message):
    if not message.text.startswith("/"):
        reply = ai_reply(message.text)
        await message.answer(reply)

# -----------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
